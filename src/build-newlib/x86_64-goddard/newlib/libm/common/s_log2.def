@node log2
@section @code{log2}, @code{log2f}--base 2 logarithm
@findex log2
@findex log2f
@strong{Synopsis}
@example
#include <math.h>
double log2(double @var{x});
float log2f(float @var{x});

@end example
@strong{Description}@*
The @code{log2} functions compute the base-2 logarithm of @var{x}.  A domain error
occurs if the argument is less than zero.  A range error occurs if the
argument is zero.

The Newlib implementations are not full, intrinisic calculations, but
rather are derivatives based on @code{log}.  (Accuracy might be slightly off from
a direct calculation.)  In addition to functions, they are also implemented as
macros defined in math.h:
@smallexample
 #define log2(x) (log (x) / _M_LN2)
 #define log2f(x) (logf (x) / (float) _M_LN2)
@end smallexample
To use the functions instead, just undefine the macros first.

You can use the (non-ANSI) function @code{matherr} to specify error
handling for these functions, indirectly through the respective @code{log}
function. 

@*
@strong{Returns}@*
The @code{log2} functions return
@ifnottex
@code{log base-2(@var{x})}
@end ifnottex
@tex
$log_2(x)$
@end tex
on success.
When @var{x} is zero, the
returned value is @code{-HUGE_VAL} and @code{errno} is set to @code{ERANGE}.
When @var{x} is negative, the returned value is NaN (not a number) and
@code{errno} is set to @code{EDOM}.  You can control the error behavior via
@code{matherr}.

@*
@strong{Portability}@*
C99, POSIX, System V Interface Definition (Issue 6).

@*
