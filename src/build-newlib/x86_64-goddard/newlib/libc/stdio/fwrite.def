@node fwrite
@section @code{fwrite}---write array elements
@findex fwrite
@findex _fwrite_r
@strong{Synopsis}
@example
#include <stdio.h>
size_t fwrite(const void *restrict @var{buf}, size_t @var{size},
    size_t @var{count}, FILE *restrict @var{fp});

#include <stdio.h>
size_t _fwrite_r(struct _reent *@var{ptr}, const void *restrict @var{buf}, size_t @var{size},
    size_t @var{count}, FILE *restrict @var{fp});

@end example
@strong{Description}@*
@code{fwrite} attempts to copy, starting from the memory location
@var{buf}, @var{count} elements (each of size @var{size}) into the file or
stream identified by @var{fp}.  @code{fwrite} may copy fewer elements than
@var{count} if an error intervenes.

@code{fwrite} also advances the file position indicator (if any) for
@var{fp} by the number of @emph{characters} actually written.

@code{_fwrite_r} is simply the reentrant version of @code{fwrite} that
takes an additional reentrant structure argument: @var{ptr}.

@*
@strong{Returns}@*
If @code{fwrite} succeeds in writing all the elements you specify, the
result is the same as the argument @var{count}.  In any event, the
result is the number of complete elements that @code{fwrite} copied to
the file.

@*
@strong{Portability}@*
ANSI C requires @code{fwrite}.

Supporting OS subroutines required: @code{close}, @code{fstat}, @code{isatty},
@code{lseek}, @code{read}, @code{sbrk}, @code{write}.

@*
