@node getchar_unlocked
@section @code{getchar_unlocked}---non-thread-safe version of getchar (macro)
@findex getchar_unlocked
@findex _getchar_unlocked_r
@strong{Synopsis}
@example
#include <stdio.h>
int getchar_unlocked();

#include <stdio.h>
int _getchar_unlocked_r(struct _reent *@var{ptr});

@end example
@strong{Description}@*
@code{getchar_unlocked} is a non-thread-safe version of @code{getchar}
declared in @code{stdio.h}.  @code{getchar_unlocked} may only safely be used
within a scope protected by flockfile() (or ftrylockfile()) and
funlockfile().  These functions may safely be used in a multi-threaded
program if and only if they are called while the invoking thread owns
the ( FILE *) object, as is the case after a successful call to the
flockfile() or ftrylockfile() functions.  If threads are disabled,
then @code{getchar_unlocked} is equivalent to @code{getchar}.

The @code{_getchar_unlocked_r} function is simply the reentrant version of
@code{getchar_unlocked} which passes an addtional reentrancy structure pointer
argument: @var{ptr}.

@*
@strong{Returns}@*
See @code{getchar}.

@*
@strong{Portability}@*
POSIX 1003.1 requires @code{getchar_unlocked}.  @code{getchar_unlocked} may
be implemented as a macro.

Supporting OS subroutines required: @code{close}, @code{fstat}, @code{isatty},
@code{lseek}, @code{read}, @code{sbrk}, @code{write}.  
@*
