@node swscanf
@section @code{swscanf}, @code{fwscanf}, @code{wscanf}---scan and format wide character input
@findex wscanf
@findex _wscanf_r
@findex fwscanf
@findex _fwscanf_r
@findex swscanf
@findex _swscanf_r
@strong{Synopsis}
@example
#include <stdio.h>

int wscanf(const wchar_t *__restrict @var{format}, ...);
int fwscanf(FILE *__restrict @var{fd},
    const wchar_t *__restrict @var{format}, ...);
int swscanf(const wchar_t *__restrict @var{str}, 
    const wchar_t *__restrict @var{format}, ...);

int _wscanf_r(struct _reent *@var{ptr}, const wchar_t *@var{format}, ...);
int _fwscanf_r(struct _reent *@var{ptr}, FILE *@var{fd}, 
    const wchar_t *@var{format}, ...);
int _swscanf_r(struct _reent *@var{ptr}, const wchar_t *@var{str},
    const wchar_t *@var{format}, ...);

@end example
@strong{Description}@*
@code{wscanf} scans a series of input fields from standard input,
one wide character at a time.  Each field is interpreted according to
a format specifier passed to @code{wscanf} in the format string at
@code{*@var{format}}.  @code{wscanf} stores the interpreted input from
each field at the address passed to it as the corresponding argument
following @var{format}.  You must supply the same number of
format specifiers and address arguments as there are input fields.

There must be sufficient address arguments for the given format
specifiers; if not the results are unpredictable and likely
disasterous.  Excess address arguments are merely ignored.

@code{wscanf} often produces unexpected results if the input diverges from
an expected pattern. Since the combination of @code{gets} or @code{fgets}
followed by @code{swscanf} is safe and easy, that is the preferred way
to be certain that a program is synchronized with input at the end
of a line.

@code{fwscanf} and @code{swscanf} are identical to @code{wscanf}, other than the
source of input: @code{fwscanf} reads from a file, and @code{swscanf}
from a string.

The routines @code{_wscanf_r}, @code{_fwscanf_r}, and @code{_swscanf_r} are reentrant
versions of @code{wscanf}, @code{fwscanf}, and @code{swscanf} that take an additional
first argument pointing to a reentrancy structure.

The string at @code{*@var{format}} is a wide character sequence composed
of zero or more directives. Directives are composed of
one or more whitespace characters, non-whitespace characters,
and format specifications.

Whitespace characters are blank (@code{ }), tab (@code{\t}), or
newline (@code{\n}).
When @code{wscanf} encounters a whitespace character in the format string
it will read (but not store) all consecutive whitespace characters
up to the next non-whitespace character in the input.

Non-whitespace characters are all other ASCII characters except the
percent sign (@code{%}).  When @code{wscanf} encounters a non-whitespace
character in the format string it will read, but not store
a matching non-whitespace character.

Format specifications tell @code{wscanf} to read and convert characters
from the input field into specific types of values, and store then
in the locations specified by the address arguments.

Trailing whitespace is left unread unless explicitly
matched in the format string.

The format specifiers must begin with a percent sign (@code{%})
and have the following form:

@smallexample
       %[*][@var{width}][@var{size}]@var{type}
@end smallexample

Each format specification begins with the percent character (@code{%}).
The other fields are:
@table @code

@item *
an optional marker; if present, it suppresses interpretation and
assignment of this input field.

@item @var{width}
an optional maximum field width: a decimal integer,
which controls the maximum number of characters that
will be read before converting the current input field.  If the
input field has fewer than @var{width} characters, @code{wscanf}
reads all the characters in the field, and then
proceeds with the next field and its format specification.

If a whitespace or a non-convertable wide character occurs
before @var{width} character are read, the characters up
to that character are read, converted, and stored.
Then @code{wscanf} proceeds to the next format specification.

@item size
@code{h}, @code{j}, @code{l}, @code{L}, @code{t}, and @code{z} are optional size
characters which override the default way that @code{wscanf}
interprets the data type of the corresponding argument.

@smallexample
Modifier   Type(s)
   hh      d, i, o, u, x, n  convert input to char,
                             store in char object

   h       d, i, o, u, x, n  convert input to short,
                             store in short object

   h       e, f, c, s, p     no effect

   j       d, i, o, u, x, n  convert input to intmax_t,
                             store in intmax_t object

   j       all others        no effect

   l       d, i, o, u, x, n  convert input to long,
                             store in long object

   l       e, f, g           convert input to double
                             store in a double object

   l       c, s, [           the input is stored in a wchar_t object

   l       p                 no effect

   ll      d, i, o, u, x, n  convert to long long,
                             store in long long

   L       d, i, o, u, x, n  convert to long long,
                             store in long long

   L       e, f, g, E, G     convert to long double,
                             store in long double

   L       all others        no effect

   t       d, i, o, u, x, n  convert input to ptrdiff_t,
                             store in ptrdiff_t object

   t       all others        no effect

   z       d, i, o, u, x, n  convert input to size_t,
                             store in size_t object

   z       all others        no effect

@end smallexample

@item @var{type}

A character to specify what kind of conversion
@code{wscanf} performs.  Here is a table of the conversion
characters:

@table @code

@item  %
No conversion is done; the percent character (@code{%}) is stored.

@item c
Scans one wide character.  Corresponding @var{arg}: @code{(char *arg)}.
Otherwise, if an @code{l} specifier is present, the corresponding
@var{arg} is a @code{(wchar_t *arg)}.

@item s
Reads a character string into the array supplied.
Corresponding @var{arg}: @code{(char arg[])}.
If an @code{l} specifier is present, the corresponding @var{arg} is a @code{(wchar_t *arg)}.

@item  [@var{pattern}]
Reads a non-empty character string into memory
starting at @var{arg}.  This area must be large
enough to accept the sequence and a
terminating null character which will be added
automatically.  (@var{pattern} is discussed in the paragraph following
this table).  Corresponding @var{arg}: @code{(char *arg)}.
If an @code{l} specifier is present, the corresponding @var{arg} is
a @code{(wchar_t *arg)}.

@item d
Reads a decimal integer into the corresponding @var{arg}: @code{(int *arg)}.

@item o
Reads an octal integer into the corresponding @var{arg}: @code{(int *arg)}.

@item u
Reads an unsigned decimal integer into the corresponding
@var{arg}: @code{(unsigned int *arg)}.
@item x,X
Read a hexadecimal integer into the corresponding @var{arg}:
@code{(int *arg)}.

@item e, f, g
Read a floating-point number into the corresponding @var{arg}:
@code{(float *arg)}.

@item E, F, G
Read a floating-point number into the corresponding @var{arg}:
@code{(double *arg)}.

@item  i
Reads a decimal, octal or hexadecimal integer into the
corresponding @var{arg}: @code{(int *arg)}.

@item  n
Stores the number of characters read in the corresponding
@var{arg}: @code{(int *arg)}.

@item  p
Stores a scanned pointer.  ANSI C leaves the details
to each implementation; this implementation treats
@code{%p} exactly the same as @code{%U}.  Corresponding
@var{arg}: @code{(void **arg)}.  
@end table


A @var{pattern} of characters surrounded by square brackets can be used
instead of the @code{s} type character.  @var{pattern} is a set of
characters which define a search set of possible characters making up
the @code{wscanf} input field.  If the first character in the brackets is a
caret (@code{^}), the search set is inverted to include all ASCII characters
except those between the brackets.  There is no range facility as is
defined in the corresponding non-wide character scanf functions.
Ranges are not part of the POSIX standard.

Here are some @var{pattern} examples:
@table @code

@item %[abcd]
matches wide character strings containing only
@code{a}, @code{b}, @code{c}, and @code{d}.

@item %[^abcd]
matches wide character strings containing any characters except
@code{a}, @code{b}, @code{c}, or @code{d}.

@item %[A-DW-Z]
Note: No wide character ranges, so this expression matches wide
character strings containing @code{A}, @code{-}, @code{D}, @code{W}, @code{Z}.
@end table


Floating point numbers (for field types @code{e}, @code{f}, @code{g}, @code{E},
@code{F}, @code{G}) must correspond to the following general form:

@smallexample
		[+/-] ddddd[.]ddd [E|e[+|-]ddd]
@end smallexample

where objects inclosed in square brackets are optional, and @code{ddd}
represents decimal, octal, or hexadecimal digits.
@end table


@*
@strong{Returns}@*
@code{wscanf} returns the number of input fields successfully
scanned, converted and stored; the return value does
not include scanned fields which were not stored.

If @code{wscanf} attempts to read at end-of-file, the return
value is @code{EOF}.

If no fields were stored, the return value is @code{0}.

@code{wscanf} might stop scanning a particular field before
reaching the normal field end character, or may
terminate entirely.

@code{wscanf} stops scanning and storing the current field
and moves to the next input field (if any)
in any of the following situations:

@itemize @bullet

@item       The assignment suppressing character (@code{*}) appears
after the @code{%} in the format specification; the current
input field is scanned but not stored.

@item       @var{width} characters have been read (@var{width} is a
width specification, a positive decimal integer).

@item       The next wide character read cannot be converted
under the the current format (for example,
if a @code{Z} is read when the format is decimal).

@item       The next wide character in the input field does not appear
in the search set (or does appear in the inverted search set).
@end itemize


When @code{wscanf} stops scanning the current input field for one of
these reasons, the next character is considered unread and
used as the first character of the following input field, or the
first character in a subsequent read operation on the input.

@code{wscanf} will terminate under the following circumstances:

@itemize @bullet

@item       The next wide character in the input field conflicts
with a corresponding non-whitespace character in the
format string.

@item       The next wide character in the input field is @code{WEOF}.

@item       The format string has been exhausted.
@end itemize


When the format string contains a wide character sequence that is
not part of a format specification, the same wide character
sequence must appear in the input; @code{wscanf} will
scan but not store the matched characters.  If a
conflict occurs, the first conflicting wide character remains in the
input as if it had never been read.

@*
@strong{Portability}@*
@code{wscanf} is C99, POSIX-1.2008.

Supporting OS subroutines required: @code{close}, @code{fstat}, @code{isatty},
@code{lseek}, @code{read}, @code{sbrk}, @code{write}.

@*
