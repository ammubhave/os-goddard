@node tmpfile
@section @code{tmpfile}---create a temporary file
@findex tmpfile
@findex _tmpfile_r
@strong{Synopsis}
@example
#include <stdio.h>
FILE *tmpfile(void);

FILE *_tmpfile_r(struct _reent *@var{reent});

@end example
@strong{Description}@*
Create a temporary file (a file which will be deleted automatically),
using a name generated by @code{tmpnam}.  The temporary file is opened with
the mode @code{"wb+"}, permitting you to read and write anywhere in it
as a binary file (without any data transformations the host system may
perform for text files).

The alternate function @code{_tmpfile_r} is a reentrant version.  The
argument @var{reent} is a pointer to a reentrancy structure.

@*
@strong{Returns}@*
@code{tmpfile} normally returns a pointer to the temporary file.  If no
temporary file could be created, the result is NULL, and @code{errno}
records the reason for failure.

@*
@strong{Portability}@*
Both ANSI C and the System V Interface Definition (Issue 2) require
@code{tmpfile}.

Supporting OS subroutines required: @code{close}, @code{fstat}, @code{getpid},
@code{isatty}, @code{lseek}, @code{open}, @code{read}, @code{sbrk}, @code{write}.

@code{tmpfile} also requires the global pointer @code{environ}.

@*
