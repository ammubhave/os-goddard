@node open_memstream
@section @code{open_memstream}, @code{open_wmemstream}---open a write stream around an arbitrary-length string
@findex open_memstream
@findex open_wmemstream
@strong{Synopsis}
@example
#include <stdio.h>
FILE *open_memstream(char **restrict @var{buf},
    size_t *restrict @var{size});

#include <wchar.h>
FILE *open_wmemstream(wchar_t **restrict @var{buf},
    size_t *restrict @var{size});

@end example
@strong{Description}@*
@code{open_memstream} creates a seekable, byte-oriented @code{FILE} stream that
wraps an arbitrary-length buffer, created as if by @code{malloc}.  The current
contents of *@var{buf} are ignored; this implementation uses *@var{size}
as a hint of the maximum size expected, but does not fail if the hint
was wrong.  The parameters @var{buf} and @var{size} are later stored
through following any call to @code{fflush} or @code{fclose}, set to the
current address and usable size of the allocated string; although
after fflush, the pointer is only valid until another stream operation
that results in a write.  Behavior is undefined if the user alters
either *@var{buf} or *@var{size} prior to @code{fclose}.

@code{open_wmemstream} is like @code{open_memstream} just with the associated
stream being wide-oriented.  The size set in @var{size} in subsequent
operations is the number of wide characters.

The stream is write-only, since the user can directly read *@var{buf}
after a flush; see @code{fmemopen} for a way to wrap a string with a
readable stream.  The user is responsible for calling @code{free} on
the final *@var{buf} after @code{fclose}.

Any time the stream is flushed, a NUL byte is written at the current
position (but is not counted in the buffer length), so that the string
is always NUL-terminated after at most *@var{size} bytes (or wide characters
in case of @code{open_wmemstream}).  However, data previously written beyond
the current stream offset is not lost, and the NUL value written during a
flush is restored to its previous value when seeking elsewhere in the string.

@*
@strong{Returns}@*
The return value is an open FILE pointer on success.  On error,
@code{NULL} is returned, and @code{errno} will be set to EINVAL if @var{buf}
or @var{size} is NULL, ENOMEM if memory could not be allocated, or
EMFILE if too many streams are already open.

@*
@strong{Portability}@*
POSIX.1-2008

Supporting OS subroutines required: @code{sbrk}.

@*
