@node rand
@section @code{rand}, @code{srand}---pseudo-random numbers
@findex rand
@findex srand
@findex rand_r
@strong{Synopsis}
@example
#include <stdlib.h>
int rand(void);
void srand(unsigned int @var{seed});
int rand_r(unsigned int *@var{seed});

@end example
@strong{Description}@*
@code{rand} returns a different integer each time it is called; each
integer is chosen by an algorithm designed to be unpredictable, so
that you can use @code{rand} when you require a random number.
The algorithm depends on a static variable called the ``random seed'';
starting with a given value of the random seed always produces the
same sequence of numbers in successive calls to @code{rand}.

You can set the random seed using @code{srand}; it does nothing beyond
storing its argument in the static variable used by @code{rand}.  You can
exploit this to make the pseudo-random sequence less predictable, if
you wish, by using some other unpredictable value (often the least
significant parts of a time-varying value) as the random seed before
beginning a sequence of calls to @code{rand}; or, if you wish to ensure
(for example, while debugging) that successive runs of your program
use the same ``random'' numbers, you can use @code{srand} to set the same
random seed at the outset.

@*
@strong{Returns}@*
@code{rand} returns the next pseudo-random integer in sequence; it is a
number between @code{0} and @code{RAND_MAX} (inclusive).

@code{srand} does not return a result.

@*
@strong{Portability}@*
@code{rand} is required by ANSI, but the algorithm for pseudo-random
number generation is not specified; therefore, even if you use
the same random seed, you cannot expect the same sequence of results
on two different systems.

@code{rand} requires no supporting OS subroutines.

@*
