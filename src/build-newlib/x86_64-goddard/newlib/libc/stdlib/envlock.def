@node __env_lock
@section @code{__env_lock}, @code{__env_unlock}---lock environ variable
@findex __env_lock
@findex __env_unlock
@strong{Synopsis}
@example
#include <envlock.h>
void __env_lock (struct _reent *@var{reent});
void __env_unlock (struct _reent *@var{reent});

@end example
@strong{Description}@*
The @code{setenv} family of routines call these functions when they need to
modify the environ variable.  The version of these routines supplied in the
library use the lock API defined in sys/lock.h.  If multiple threads of
execution can call @code{setenv}, or if @code{setenv} can be called reentrantly,
then you need to define your own versions of these functions in order to
safely lock the memory pool during a call.  If you do not, the memory pool
may become corrupted.

A call to @code{setenv} may call @code{__env_lock} recursively; that is,
the sequence of calls may go @code{__env_lock}, @code{__env_lock},
@code{__env_unlock}, @code{__env_unlock}.  Any implementation of these
routines must be careful to avoid causing a thread to wait for a lock
that it already holds.

@*
