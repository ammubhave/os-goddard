@node mbtowc
@section @code{mbtowc}---minimal multibyte to wide char converter
@findex mbtowc
@strong{Synopsis}
@example
#include <stdlib.h>
int mbtowc(wchar_t *restrict @var{pwc}, const char *restrict @var{s}, size_t @var{n});

@end example
@strong{Description}@*
When _MB_CAPABLE is not defined, this is a minimal ANSI-conforming 
implementation of @code{mbtowc}.  In this case,
only ``multi-byte character sequences'' recognized are single bytes,
and they are ``converted'' to themselves.
Each call to @code{mbtowc} copies one character from @code{*@var{s}} to
@code{*@var{pwc}}, unless @var{s} is a null pointer.  The argument n
is ignored.

When _MB_CAPABLE is defined, this routine calls @code{_mbtowc_r} to perform
the conversion, passing a state variable to allow state dependent
decoding.  The result is based on the locale setting which may
be restricted to a defined set of locales.

@*
@strong{Returns}@*
This implementation of @code{mbtowc} returns @code{0} if
@var{s} is @code{NULL} or is the empty string; 
it returns @code{1} if not _MB_CAPABLE or
the character is a single-byte character; it returns @code{-1}
if n is @code{0} or the multi-byte character is invalid; 
otherwise it returns the number of bytes in the multibyte character.
If the return value is -1, no changes are made to the @code{pwc}
output string.  If the input is the empty string, a wchar_t nul
is placed in the output string and 0 is returned.  If the input
has a length of 0, no changes are made to the @code{pwc} output string.

@*
@strong{Portability}@*
@code{mbtowc} is required in the ANSI C standard.  However, the precise
effects vary with the locale.

@code{mbtowc} requires no supporting OS subroutines.

@*
