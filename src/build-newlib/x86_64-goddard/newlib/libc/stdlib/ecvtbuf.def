@node ecvtbuf
@section @code{ecvtbuf}, @code{fcvtbuf}---double or float to string
@findex ecvtbuf
@findex fcvtbuf
@strong{Synopsis}
@example
#include <stdio.h>

char *ecvtbuf(double @var{val}, int @var{chars}, int *@var{decpt},
    int *@var{sgn}, char *@var{buf});

char *fcvtbuf(double @var{val}, int @var{decimals}, int *@var{decpt},
    int *@var{sgn}, char *@var{buf});

@end example
@strong{Description}@*
@code{ecvtbuf} and @code{fcvtbuf} produce (null-terminated) strings
of digits representating the @code{double} number @var{val}.

The only difference between @code{ecvtbuf} and @code{fcvtbuf} is the
interpretation of the second argument (@var{chars} or
@var{decimals}). For @code{ecvtbuf}, the second argument @var{chars}
specifies the total number of characters to write (which is
also the number of significant digits in the formatted string,
since these two functions write only digits). For @code{fcvtbuf},
the second argument @var{decimals} specifies the number of
characters to write after the decimal point; all digits for
the integer part of @var{val} are always included.

Since @code{ecvtbuf} and @code{fcvtbuf} write only digits in the
output string, they record the location of the decimal point
in @code{*@var{decpt}}, and the sign of the number in @code{*@var{sgn}}.
After formatting a number, @code{*@var{decpt}} contains the number
of digits to the left of the decimal point.  @code{*@var{sgn}}
contains @code{0} if the number is positive, and @code{1} if it is
negative.  For both functions, you supply a pointer @var{buf} to
an area of memory to hold the converted string.

@*
@strong{Returns}@*
Both functions return a pointer to @var{buf}, the string
containing a character representation of @var{val}.

@*
@strong{Portability}@*
Neither function is ANSI C.

Supporting OS subroutines required: @code{close}, @code{fstat}, @code{isatty},
@code{lseek}, @code{read}, @code{sbrk}, @code{write}.

@*
