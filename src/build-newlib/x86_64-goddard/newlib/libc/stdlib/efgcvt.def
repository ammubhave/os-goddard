@node ecvt
@section @code{ecvt}, @code{ecvtf}, @code{fcvt}, @code{fcvtf}---double or float to string
@findex ecvt
@findex ecvtf
@findex fcvt
@findex fcvtf
@strong{Synopsis}
@example
#include <stdlib.h>

char *ecvt(double @var{val}, int @var{chars}, int *@var{decpt}, int *@var{sgn});
char *ecvtf(float @var{val}, int @var{chars}, int *@var{decpt}, int *@var{sgn});

char *fcvt(double @var{val}, int @var{decimals}, 
    int *@var{decpt}, int *@var{sgn});
char *fcvtf(float @var{val}, int @var{decimals}, 
    int *@var{decpt}, int *@var{sgn});

@end example
@strong{Description}@*
@code{ecvt} and @code{fcvt} produce (null-terminated) strings of digits
representating the @code{double} number @var{val}.
@code{ecvtf} and @code{fcvtf} produce the corresponding character
representations of @code{float} numbers.

(The @code{stdlib} functions @code{ecvtbuf} and @code{fcvtbuf} are reentrant
versions of @code{ecvt} and @code{fcvt}.)

The only difference between @code{ecvt} and @code{fcvt} is the
interpretation of the second argument (@var{chars} or @var{decimals}).
For @code{ecvt}, the second argument @var{chars} specifies the total number
of characters to write (which is also the number of significant digits
in the formatted string, since these two functions write only digits).
For @code{fcvt}, the second argument @var{decimals} specifies the number of
characters to write after the decimal point; all digits for the integer
part of @var{val} are always included.

Since @code{ecvt} and @code{fcvt} write only digits in the output string,
they record the location of the decimal point in @code{*@var{decpt}}, and
the sign of the number in @code{*@var{sgn}}.  After formatting a number,
@code{*@var{decpt}} contains the number of digits to the left of the
decimal point.  @code{*@var{sgn}} contains @code{0} if the number is positive,
and @code{1} if it is negative.

@*
@strong{Returns}@*
All four functions return a pointer to the new string containing a
character representation of @var{val}.

@*
@strong{Portability}@*
None of these functions are ANSI C.

Supporting OS subroutines required: @code{close}, @code{fstat}, @code{isatty},
@code{lseek}, @code{read}, @code{sbrk}, @code{write}.

@*
@page
@*
@node gvcvt
@section @code{gvcvt}, @code{gcvtf}---format double or float as string
@findex gcvt
@findex gcvtf
@strong{Synopsis}
@example
#include <stdlib.h>

char *gcvt(double @var{val}, int @var{precision}, char *@var{buf});
char *gcvtf(float @var{val}, int @var{precision}, char *@var{buf});

@end example
@strong{Description}@*
@code{gcvt} writes a fully formatted number as a null-terminated
string in the buffer @code{*@var{buf}}.  @code{gdvtf} produces corresponding
character representations of @code{float} numbers.

@code{gcvt} uses the same rules as the @code{printf} format
`@code{%.@var{precision}g}'---only negative values are signed (with
`@code{-}'), and either exponential or ordinary decimal-fraction format
is chosen depending on the number of significant digits (specified by
@var{precision}).

@*
@strong{Returns}@*
The result is a pointer to the formatted representation of @var{val}
(the same as the argument @var{buf}).

@*
@strong{Portability}@*
Neither function is ANSI C.

Supporting OS subroutines required: @code{close}, @code{fstat}, @code{isatty},
@code{lseek}, @code{read}, @code{sbrk}, @code{write}.

@*
