@node on_exit
@section @code{on_exit}---request execution of function with argument at program exit
@findex on_exit
@strong{Synopsis}
@example
#include <stdlib.h>
int on_exit (void (*@var{function})(int, void *), void *@var{arg});

@end example
@strong{Description}@*
You can use @code{on_exit} to enroll functions in a list of functions that
will be called when your program terminates normally.  The argument is
a pointer to a user-defined function which takes two arguments.  The
first is the status code passed to exit and the second argument is of type
pointer to void.  The function must not return a result.  The value
of @var{arg} is registered and passed as the argument to @var{function}.

The functions are kept in a LIFO stack; that is, the last function
enrolled by @code{atexit} or @code{on_exit} will be the first to execute when 
your program exits.  You can intermix functions using @code{atexit} and
@code{on_exit}.

There is no built-in limit to the number of functions you can enroll
in this list; however, after every group of 32 functions is enrolled,
@code{atexit}/@code{on_exit} will call @code{malloc} to get space for the next part 
of the list.   The initial list of 32 functions is statically allocated, so
you can always count on at least that many slots available.

@*
@strong{Returns}@*
@code{on_exit} returns @code{0} if it succeeds in enrolling your function,
@code{-1} if it fails (possible only if no space was available for
@code{malloc} to extend the list of functions).

@*
@strong{Portability}@*
@code{on_exit} is a non-standard glibc extension

Supporting OS subroutines required: None

@*
