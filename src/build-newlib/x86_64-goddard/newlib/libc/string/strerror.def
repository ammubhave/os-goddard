@node strerror
@section @code{strerror}---convert error number to string
@findex strerror
@strong{Synopsis}
@example
#include <string.h>
char *strerror(int @var{errnum});
char *_strerror_r(struct _reent @var{ptr}, int @var{errnum},
    int @var{internal}, int *@var{error});

@end example
@strong{Description}@*
@code{strerror} converts the error number @var{errnum} into a
string.  The value of @var{errnum} is usually a copy of @code{errno}.
If @code{errnum} is not a known error number, the result points to an
empty string.

This implementation of @code{strerror} prints out the following strings
for each of the values defined in `@code{errno.h}':

@table @code

@item 0
Success

@item E2BIG
Arg list too long

@item EACCES
Permission denied

@item EADDRINUSE
Address already in use

@item EADV
Advertise error

@item EAFNOSUPPORT
Address family not supported by protocol family

@item EAGAIN
No more processes

@item EALREADY
Socket already connected

@item EBADF
Bad file number

@item EBADMSG
Bad message

@item EBUSY
Device or resource busy

@item ECHILD
No children

@item ECOMM
Communication error

@item ECONNABORTED
Software caused connection abort

@item ECONNREFUSED
Connection refused

@item EDEADLK
Deadlock

@item EDESTADDRREQ
Destination address required

@item EEXIST
File exists

@item EDOM
Math argument

@item EFAULT
Bad address

@item EFBIG
File too large

@item EHOSTDOWN
Host is down

@item EHOSTUNREACH
Host is unreachable

@item EIDRM
Identifier removed

@item EINPROGRESS
Connection already in progress

@item EINTR
Interrupted system call

@item EINVAL
Invalid argument

@item EIO
I/O error

@item EISCONN
Socket is already connected

@item EISDIR
Is a directory

@item ELIBACC
Cannot access a needed shared library

@item ELIBBAD
Accessing a corrupted shared library

@item ELIBEXEC
Cannot exec a shared library directly

@item ELIBMAX
Attempting to link in more shared libraries than system limit

@item ELIBSCN
@code{.lib} section in a.out corrupted

@item EMFILE
Too many open files

@item EMLINK
Too many links

@item EMSGSIZE
Message too long

@item EMULTIHOP
Multihop attempted

@item ENAMETOOLONG
File or path name too long

@item ENETDOWN
Network interface not configured

@item ENETUNREACH
Network is unreachable

@item ENFILE
Too many open files in system

@item ENODEV
No such device

@item ENOENT
No such file or directory

@item ENOEXEC
Exec format error

@item ENOLCK
No lock

@item ENOLINK
Virtual circuit is gone

@item ENOMEM
Not enough space

@item ENOMSG
No message of desired type

@item ENONET
Machine is not on the network

@item ENOPKG
No package

@item ENOPROTOOPT
Protocol not available

@item ENOSPC
No space left on device

@item ENOSR
No stream resources

@item ENOSTR
Not a stream

@item ENOSYS
Function not implemented

@item ENOTBLK
Block device required

@item ENOTCONN
Socket is not connected

@item ENOTDIR
Not a directory

@item ENOTEMPTY
Directory not empty

@item ENOTSOCK
Socket operation on non-socket

@item ENOTSUP
Not supported

@item ENOTTY
Not a character device

@item ENXIO
No such device or address

@item EPERM
Not owner

@item EPIPE
Broken pipe

@item EPROTO
Protocol error

@item EPROTOTYPE
Protocol wrong type for socket

@item EPROTONOSUPPORT
Unknown protocol

@item ERANGE
Result too large

@item EREMOTE
Resource is remote

@item EROFS
Read-only file system

@item ESHUTDOWN
Can't send after socket shutdown

@item ESOCKTNOSUPPORT
Socket type not supported

@item ESPIPE
Illegal seek

@item ESRCH
No such process

@item ESRMNT
Srmount error

@item ETIME
Stream ioctl timeout

@item ETIMEDOUT
Connection timed out

@item ETXTBSY
Text file busy

@item EXDEV
Cross-device link

@item ECANCELED
Operation canceled

@item ENOTRECOVERABLE
State not recoverable

@item EOWNERDEAD
Previous owner died

@item ESTRPIPE
Strings pipe error

@end table


@code{_strerror_r} is a reentrant version of the above.

@*
@strong{Returns}@*
This function returns a pointer to a string.  Your application must
not modify that string.

@*
@strong{Portability}@*
ANSI C requires @code{strerror}, but does not specify the strings used
for each error number.

Although this implementation of @code{strerror} is reentrant (depending
on @code{_user_strerror}), ANSI C declares that subsequent calls to
@code{strerror} may overwrite the result string; therefore portable
code cannot depend on the reentrancy of this subroutine.

Although this implementation of @code{strerror} guarantees a non-null
result with a NUL-terminator, some implementations return @code{NULL}
on failure.  Although POSIX allows @code{strerror} to set @code{errno}
to EINVAL on failure, this implementation does not do so (unless
you provide @code{_user_strerror}).

POSIX recommends that unknown @var{errnum} result in a message
including that value, however it is not a requirement and this
implementation does not provide that information (unless you
provide @code{_user_strerror}).

This implementation of @code{strerror} provides for user-defined
extensibility.  @code{errno.h} defines @var{__ELASTERROR}, which can be
used as a base for user-defined error values.  If the user supplies a
routine named @code{_user_strerror}, and @var{errnum} passed to
@code{strerror} does not match any of the supported values,
@code{_user_strerror} is called with three arguments.  The first is of
type @var{int}, and is the @var{errnum} value unknown to @code{strerror}.
The second is of type @var{int}, and matches the @var{internal} argument
of @code{_strerror_r}; this should be zero if called from @code{strerror}
and non-zero if called from any other function; @code{_user_strerror} can
use this information to satisfy the POSIX rule that no other
standardized function can overwrite a static buffer reused by
@code{strerror}.  The third is of type @var{int *}, and matches the
@var{error} argument of @code{_strerror_r}; if a non-zero value is stored
into that location (usually @var{EINVAL}), then @code{strerror} will set
@code{errno} to that value, and the XPG variant of @code{strerror_r} will
return that value instead of zero or @var{ERANGE}.  @code{_user_strerror}
returns a @var{char *} value; returning @var{NULL} implies that the user
function did not choose to handle @var{errnum}.  The default
@code{_user_strerror} returns @var{NULL} for all input values.  Note that
@code{_user_sterror} must be thread-safe, and only denote errors via the
third argument rather than modifying @code{errno}, if @code{strerror} and
@code{strerror_r} are are to comply with POSIX.

@code{strerror} requires no supporting OS subroutines.

@*
